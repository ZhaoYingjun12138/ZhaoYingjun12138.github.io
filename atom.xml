<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-08T13:47:17.675Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/08/%E5%9B%BE%E8%AE%BA%E5%92%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2022/07/08/%E5%9B%BE%E8%AE%BA%E5%92%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/</id>
    <published>2022-07-08T13:42:16.150Z</published>
    <updated>2022-07-08T13:47:17.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>title: 图论算法</p></blockquote><h1 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h1><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p><strong>能用dijkstra的就别用spfa</strong></p><h3 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a><strong>Dijkstra 算法</strong></h3><p>朴素用邻接矩阵存储 &#x2F;&#x2F; 稠密图 点少线多</p><p>1.循环 n 次</p><p>2.找到一个 t 用来代表当前所有点到目前点的最短距离</p><p>3.用 t 来更新到这个点的最短距离</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">550</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;  n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n ; j ++)</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> ;j &lt;= n ; j ++)</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j],dist[t] + g[t][j]);</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m ;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        g[a][b] = <span class="built_in">min</span>(g[a][b],c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化版的dijkstr-算法"><a href="#优化版的dijkstr-算法" class="headerlink" title="优化版的dijkstr 算法"></a><strong>优化版的dijkstr 算法</strong></h3><p>稀疏图 用邻接矩阵来存储</p><p>用堆进行优化 每次取最短值的时候 取堆顶元素</p><p><strong>相当于是省略了朴素版dijkstra 的找到距离当前点最短距离这一步；；</strong></p><p>代替上边的第一二步</p><p>然后更新所有堆的距离</p><p>用一个 pair &lt;int,int&gt;  数组来存储到起点的距离和当前点的编号</p><p>用邻接表遍历所有到达的点 并对其进行判断 如果小于 并且该值并未被使用过  即 st 为 false  可以进行更新</p><p>就把该值和距离推进 heap 数组中 </p><p> 这里 与 spfa 算法进行个区分  </p><p> dijsktra 算法一般在取得编号后就进行判断 是否进行 continue 环节</p><p> spfa 算法 则在 for 循环和 if 循环 之后判断该值是否使用过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N],e[N],ne[N],w[N],idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    priority_queue &lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt; &gt;heap;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ver = t.second;</span><br><span class="line">        <span class="type">int</span> s = t.first;</span><br><span class="line">        <span class="keyword">if</span>(st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span> ; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[ver] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[ver] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m ;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c ;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bellman-ford-算法"><a href="#Bellman-ford-算法" class="headerlink" title="Bellman_ford 算法"></a><strong>Bellman_ford</strong> 算法</h3><p>用于处理存在负权边的环节  并且存在 判断至少在几条边实现</p><p><strong>利用结构体来存储</strong></p><p>第一层 for 循环代表最短几条边</p><p>接下来对所有的边进行遍历，用 struct 来对每条边取最短的路径</p><p>为了避免出现连带反应 因此 需要每次 copy 上一个的值 并且那这个值来与后面的进行比对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">550</span>,M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> last[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bellman_ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; k ;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(last,dist,<span class="keyword">sizeof</span> dist);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j&lt; m ; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> e = edges[j];</span><br><span class="line">            dist[e.b] = <span class="built_in">min</span>(dist[e.b], last[e.a] + e.c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        edges[i] = &#123;x,y,z&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bellman_ford</span>();</span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dist[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spfa-算法"><a href="#Spfa-算法" class="headerlink" title="Spfa 算法"></a><strong>Spfa 算法</strong></h3><p> 是基于bellman_ford 算法的一种优化</p><p>因为bellman 算法是对所有的边都进行了取最短距离</p><p>而Spfa  算法则是利用 队列 来存储每次取得到的 最短距离</p><p>并用这个 距离 来更新别的距离</p><p>bellman 算法 保留了所有到这个点的前一个点的最短距离，但这样的话 无疑会有一些边是未曾用过的</p><p>而 spfa 算法就是只记录了会被更新的节点 并 用这个点来更新别的点</p><p>用 for 循环 来遍历所有与当前点有接触的所有点</p><p>然后用队列将该点存下来 在每次遍历队列中的点 以此为延续不断连接所有可能会遇到的点</p><p>即该点用到了 就会 继续更新它后面的点</p><p>Bellman_ford算法会遍历所有的边，但是有很多的边遍历了其实没有什么意义，我们只用遍历那些到源点距离变小的点所连接的边即可，只有当一个点的前驱结点更新了，该节点才会得到更新；因此考虑到这一点，我们将创建一个队列每一次加入距离被更新的结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> +<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N],w[N],e[N],ne[N],idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t] ; i != <span class="number">-1</span> ; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j]) <span class="comment">// 这里只会存放已经被更新过的边 ，， 如果被更新了 且不再队列中才会被继续添加</span></span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a&gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Foyld-算法"><a href="#Foyld-算法" class="headerlink" title="Foyld 算法"></a><strong>Foyld 算法</strong></h3><p>用 邻接表来存储   但是 为什么这样 初始化 </p><p>因为 g 数组中存储的就是点到点的距离，所以当 i &#x3D;&#x3D; j 的时候 距离为 0 ，所以初始化为 0；</p><p>k i j</p><p> g[i][j] &#x3D; min(g[i][j] , g[i][k] + g[k][j]);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>,INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span> ;k &lt;= n ;k ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i &lt;= n ; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n ;j ++)</span><br><span class="line">            g[i][j] = <span class="built_in">min</span>(g[i][j] , g[i][k] + g[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n ; j ++)</span><br><span class="line">            <span class="keyword">if</span>(i == j) g[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> g[i][j] = INF;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        g[a][b] = <span class="built_in">min</span>(g[a][b] , c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Floyd</span>();</span><br><span class="line">    <span class="keyword">while</span>(q -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(g[x][y] &gt; INF / <span class="number">2</span>) cout &lt;&lt;<span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; g[x][y] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a><strong>Prim 算法</strong></h3><p><strong>处理稠密图</strong></p><p>主要是利用<strong>扩大集合</strong>的思想来做的 ，不断找到距离当前集合最近的点，并把他加入</p><p>与 dijkstra 算法类似</p><p>枚举 n 次 </p><p>找到距离集合最近的点 t </p><p>用 t 来更新其他点到集合的距离</p><p>利用 res 记录所有不是第一条边的时候的权重和</p><p>当出现不是第一条边并且最近距离也是趋近于正无穷时，直接结束</p><p>返回 false</p><p>最后使用 g[t] [j]  时，关于为什么使用它的原因是，需要找到当前点距离集合最近的点，又因为 dist 本身保存的就是当前点到第一个点即集合的距离，再加上前面每次循环找到的都是距离上一个点的最近距离，所以说<strong>当 dist 不是最近的距离时 最近的距离就是 g</strong>   ，，因为上面每次的都是取到了距离的最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">550</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="keyword">if</span>(i) res += dist[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a&gt;&gt; b &gt;&gt; c;</span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b],c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">Prim</span>();</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a><strong>Kruskal 算法</strong></h3><p>处理稀疏图</p><p>通过结构体<strong>按照权重来进行排序</strong></p><p>利用并查集和结构体来存储边和权重</p><p>每次如果两点之间没有联系则利用并查集 进行  两两  相加 记录权重和 count </p><p>如果 cnt &lt; n-1 则不存在最小生成树，否则输出权值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> +<span class="number">10</span> , M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edges</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edges &amp; W)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != p[x]) p[x] =  <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span> , res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(edges,edges + m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++) p[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a , b = edges[i].b , w = edges[i].w;</span><br><span class="line">        a = <span class="built_in">find</span>(a),b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(a != b)</span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt; m ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">         cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">         edges[i] = &#123;a,b,c&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="keyword">if</span>(t == INF) cout &lt;&lt;<span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; t &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="**匈牙利算法 **"></a>**匈牙利算法 **</h3><p><strong>判断二分图的最大匹配</strong></p><p>根本原理 是遍历每一个点</p><p>然后 去找到该点指向的点，再跟着判断 该点是否已经被别的点所匹配或是 被别的点匹配的那个点 是否可以匹配别的点 如果 可以 就会替代上一个匹配的点</p><p>就是一个递归的过程</p><p>主要就是 match 数组 和 st 数组</p><p>for 循环里面每次都会初始化所有的为 false 原因是 让每个人都会进行完美的递归 保证了 最佳答案的出现（把所有妹子清空）即初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">550</span>,M = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n1,n2,m;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="type">int</span> match[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[x]; i != <span class="number">-1</span> ; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="literal">false</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(i)) res ++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="染色法判断"><a href="#染色法判断" class="headerlink" title="染色法判断"></a><strong>染色法判断</strong></h3><p><strong>是否为二分图</strong></p><p>利用染色 1，2 来给点做上标记，并利用 dfs 的过程来进行深度的判断</p><p>如果 bool 类型的 dfs 返回 false 的话，代表染色失败，即存在冲突，不满足二分图的性质</p><p>如果当前点没有染色，就利用 dfs 把他染成 3 - x 色，如果有颜色 并且相等的话</p><p>直接返回 false</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>,M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> color[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a]; </span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    color[u] = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u] ; i != <span class="number">-1</span> ; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!color[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(j,<span class="number">3</span>-x)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[j] == x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m ;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a,b),<span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i &lt;= n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!color[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(i,<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Topsort-Dfs-Bfs"><a href="#Topsort-Dfs-Bfs" class="headerlink" title="Topsort Dfs Bfs"></a>Topsort Dfs Bfs</h2><h3 id="topsort-拓扑排序"><a href="#topsort-拓扑排序" class="headerlink" title="topsort 拓扑排序"></a><strong>topsort</strong> 拓扑排序</h3><p>利用入度来进行判断 找到所有入度为 0 的点把其加入队列中</p><p>最好利用手动模拟队列 这样会对结果的输出起到简化作用</p><p>在循环中，如果存在入度为 1 的情况出现时，也会把该值加入到队列中，因为他同样可以满足拓扑的条件</p><h3 id="Dfs-深度优先遍历"><a href="#Dfs-深度优先遍历" class="headerlink" title="Dfs 深度优先遍历"></a><strong>Dfs</strong> 深度优先遍历</h3><p>dfs 主要是一个利用递归的过程</p><p>深度优先遍历</p><p>可以处理排列数字等问题</p><h3 id="Bfs-宽度优先遍历"><a href="#Bfs-宽度优先遍历" class="headerlink" title="Bfs 宽度优先遍历"></a><strong>Bfs</strong> 宽度优先遍历</h3><p>宽度优先遍历</p><p>bfs 主要利用队列来进行存储，当队列中的元素不为空的时候，会一直继续下去，每次推入满足条件的点，最后找到最短的路径或者是迷宫的出路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;title: 图论算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;图论算法&quot;&gt;&lt;a href=&quot;#图论算法&quot; class=&quot;headerlink&quot; title=&quot;图论算法&quot;&gt;&lt;/a&gt;图论算法&lt;/h1&gt;&lt;h2 id=&quot;最短路&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/08/MySql%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/07/08/MySql%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-08T13:39:25.116Z</published>
    <updated>2022-07-08T13:47:30.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>title: MySql的学习</p></blockquote><h1 id="MySql的学习"><a href="#MySql的学习" class="headerlink" title="MySql的学习"></a>MySql的学习</h1><p>数据库 —&gt; 表 –&gt; 字段</p><p>Sql语句不区分大小写</p><h2 id="DDL，DQL-DCL-DML"><a href="#DDL，DQL-DCL-DML" class="headerlink" title="DDL，DQL,DCL,DML"></a>DDL，DQL,DCL,DML</h2><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="Database-defined-langugage"><a href="#Database-defined-langugage" class="headerlink" title="Database defined langugage"></a>Database defined langugage</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#数据库的操作</span><br><span class="line">use table_name</span><br><span class="line"><span class="keyword">select</span> databse()</span><br><span class="line"><span class="keyword">show</span> databases</span><br><span class="line"><span class="keyword">drop</span> database table_name</span><br><span class="line"><span class="keyword">create</span> database table_name</span><br><span class="line">#表的操作</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段 字段类型,字段 字段类型)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">show</span> tables</span><br><span class="line"><span class="keyword">desc</span> 表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span><span class="operator">/</span>modify<span class="operator">/</span>change<span class="operator">/</span><span class="keyword">drop</span><span class="operator">/</span>rename <span class="keyword">to</span> ...</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="operator">/</span><span class="operator">/</span> 详细数据</span><br></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="Database-mainpulate-langugage"><a href="#Database-mainpulate-langugage" class="headerlink" title="Database mainpulate langugage"></a>Database mainpulate langugage</h4><p>添加数据 Insert</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 （字段名） <span class="keyword">values</span>（值）</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值) <span class="operator">/</span><span class="operator">/</span> 如果省略字段名，也需要设置不进行使用的值，可以设置为<span class="keyword">null</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 （字段名） <span class="keyword">values</span>（值），（值）</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值)，(值) <span class="operator">/</span><span class="operator">/</span> 如果省略字段名，也需要设置不进行使用的值，可以设置为<span class="keyword">null</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;title: MySql的学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MySql的学习&quot;&gt;&lt;a href=&quot;#MySql的学习&quot; class=&quot;headerlink&quot; title=&quot;MySql的学习&quot;&gt;&lt;/a&gt;MySql的学习&lt;/h1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/08/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2022/07/08/Git%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</id>
    <published>2022-07-08T13:36:54.096Z</published>
    <updated>2022-07-08T13:47:14.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>title: Git学习</p></blockquote><h1 id="Git分布式版本控制工具"><a href="#Git分布式版本控制工具" class="headerlink" title="Git分布式版本控制工具"></a>Git分布式版本控制工具</h1><h2 id="1-、目标"><a href="#1-、目标" class="headerlink" title="1 、目标"></a>1 、目标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">了解Git基本概念</span><br><span class="line">能够概述git工作流程</span><br><span class="line">能够使用Git常用命令</span><br><span class="line">熟悉Git代码托管服务</span><br><span class="line">能够使用idea操作git</span><br></pre></td></tr></table></figure><h2 id="2-、概述"><a href="#2-、概述" class="headerlink" title="2 、概述"></a>2 、概述</h2><h3 id="2-1、开发中的实际场景"><a href="#2-1、开发中的实际场景" class="headerlink" title="2.1、开发中的实际场景"></a>2.1、开发中的实际场景</h3><h3 id="2-2、版本控制器的方式"><a href="#2-2、版本控制器的方式" class="headerlink" title="2.2、版本控制器的方式"></a>2.2、版本控制器的方式</h3><h3 id="2-3、SVN"><a href="#2-3、SVN" class="headerlink" title="2.3、SVN"></a>2.3、SVN</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">场景一：备份</span><br><span class="line">小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月</span><br><span class="line">来的努力付之东流</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">场景二：代码还原</span><br><span class="line">这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的</span><br><span class="line">代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">场景三：协同开发</span><br><span class="line">小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java</span><br><span class="line">文件中的第 30 行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的</span><br><span class="line">第 50 行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记</span><br><span class="line">忆中了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">场景四：追溯问题代码的编写人和编写时间！</span><br><span class="line">老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这</span><br><span class="line">次来说吧，有个Bug调试了 30 多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、刘</span><br><span class="line">流和正经牛都不承认是自己干的！</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a、集中式版本控制工具</span><br><span class="line">集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代</span><br><span class="line">码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。</span><br><span class="line">举例：SVN和CVS</span><br><span class="line">b、分布式版本控制工具</span><br><span class="line">分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无</span><br><span class="line">需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的</span><br><span class="line">修改了。</span><br><span class="line">举例：Git</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区"><a href="#黑马程序员-北京昌平校区" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h3 id="2-4、Git"><a href="#2-4、Git" class="headerlink" title="2.4、Git"></a>2.4、Git</h3><h3 id="2-5、Git工作流程图"><a href="#2-5、Git工作流程图" class="headerlink" title="2.5、Git工作流程图"></a>2.5、Git工作流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个</span><br><span class="line">中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以</span><br><span class="line">把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不</span><br><span class="line">过“交换”修改不方便而已。</span><br><span class="line">git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是</span><br><span class="line">Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line">同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众</span><br><span class="line">多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（ 1991 － 2002</span><br><span class="line">年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代</span><br><span class="line">码。</span><br><span class="line">到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了</span><br><span class="line">Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者</span><br><span class="line">Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订</span><br><span class="line">了若干目标：</span><br><span class="line">速度</span><br><span class="line">简单的设计</span><br><span class="line">对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</span><br><span class="line">完全分布式</span><br><span class="line">有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-1"><a href="#黑马程序员-北京昌平校区-1" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="命令如下："><a href="#命令如下：" class="headerlink" title="命令如下："></a>命令如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. clone（克隆）: 从远程仓库中克隆代码到本地仓库</span><br><span class="line">2. checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</span><br><span class="line">3. add（添加）: 在提交前先将代码提交到暂存区</span><br><span class="line">4. commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</span><br><span class="line">5. fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</span><br><span class="line">6. pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于</span><br><span class="line">fetch+merge</span><br><span class="line">7. push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</span><br></pre></td></tr></table></figure><h2 id="3-、Git安装与常用命令"><a href="#3-、Git安装与常用命令" class="headerlink" title="3 、Git安装与常用命令"></a>3 、Git安装与常用命令</h2><p>本教程里的git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令，在此为大家提前列举：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls/ll 查看当前目录</span><br><span class="line">cat 查看文件内容</span><br><span class="line">touch 创建文件</span><br><span class="line">vi vi编辑器（使用vi编辑器是为了方便展示效果，学员可以记事本、editPlus、notPad++等其它编</span><br><span class="line">辑器）</span><br></pre></td></tr></table></figure><h3 id="3-1、-Git环境配置"><a href="#3-1、-Git环境配置" class="headerlink" title="3.1、 Git环境配置"></a>3.1、 Git环境配置</h3><h4 id="3-1-1-下载与安装"><a href="#3-1-1-下载与安装" class="headerlink" title="3.1.1 下载与安装"></a>3.1.1 下载与安装</h4><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><h4 id="下载完成后可以得到如下安装文件："><a href="#下载完成后可以得到如下安装文件：" class="headerlink" title="下载完成后可以得到如下安装文件："></a>下载完成后可以得到如下安装文件：</h4><h1 id="黑马程序员-北京昌平校区-2"><a href="#黑马程序员-北京昌平校区-2" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看<br>到如下两个菜单则说明Git安装成功。</p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用<br>该用户信息</p><p><strong>3.1.2基本配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 打开Git Bash</span><br><span class="line">2. 设置用户信息</span><br></pre></td></tr></table></figure><p>git config –global user.name “itcast”</p><p>git config –global user.email “<a href="mailto:&#104;&#101;&#108;&#x6c;&#111;&#64;&#105;&#116;&#99;&#97;&#x73;&#116;&#x2e;&#x63;&#110;">&#104;&#101;&#108;&#x6c;&#111;&#64;&#105;&#116;&#99;&#97;&#x73;&#116;&#x2e;&#x63;&#110;</a>”</p><p>查看配置信息</p><p>git config –global user.name</p><p>git config –global user.email</p><p><strong>3.1.3 为常用指令配置别名（可选）</strong></p><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li>打开用户目录，创建.bashrc文件</li></ol><p>部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行 touch ~&#x2F;.bashrc</p><ol start="2"><li>在.bashrc文件中输入如下内容：</li></ol><h1 id="黑马程序员-北京昌平校区-3"><a href="#黑马程序员-北京昌平校区-3" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 打开gitBash，执行source ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>3.1.4 解决GitBash乱码问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 打开GitBash执行下面命令</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. $&#123;git_home&#125;/etc/bash.bashrc 文件最后加入下面两行</span><br></pre></td></tr></table></figure><h3 id="3-2、获取本地仓库"><a href="#3-2、获取本地仓库" class="headerlink" title="3.2、获取本地仓库"></a>3.2、获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><p>1 ）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</p><p>2 ）进入这个目录中，点击右键打开Git bash窗口</p><p>3 ）执行命令git init</p><p>4 ）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><h3 id="3-3、基础操作指令"><a href="#3-3、基础操作指令" class="headerlink" title="3.3、基础操作指令"></a>3.3、基础操作指令</h3><p>Git工作目录下对于文件的 <strong>修改</strong> (增加、删除、更新)会存在几个状态，这些 <strong>修改</strong> 的状态会随着我们执行Git<br>的命令而发生变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#用于输出git提交日志</span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line">#用于输出当前目录所有文件及基本信息</span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-4"><a href="#黑马程序员-北京昌平校区-4" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="本章节主要讲解如何使用命令来控制这些状态之间的转换："><a href="#本章节主要讲解如何使用命令来控制这些状态之间的转换：" class="headerlink" title="本章节主要讲解如何使用命令来控制这些状态之间的转换："></a>本章节主要讲解如何使用命令来控制这些状态之间的转换：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git add (工作区 --&gt; 暂存区)</span><br><span class="line">2. git commit (暂存区 --&gt; 本地仓库)</span><br></pre></td></tr></table></figure><p><strong>3.3.1、*查看修改的状态（status）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用：查看的修改的状态（暂存区、工作区）</span><br><span class="line">命令形式：git status</span><br></pre></td></tr></table></figure><p><strong>3.3.2、*添加工作区到暂存区(add)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用：添加工作区一个或多个文件的修改到暂存区</span><br><span class="line">命令形式：git add 单个文件名|通配符</span><br><span class="line">将所有修改加入暂存区：git add.</span><br></pre></td></tr></table></figure><p><strong>3.3.3、*提交暂存区到本地仓库(commit)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用：提交暂存区内容到本地仓库的当前分支</span><br><span class="line">命令形式：git commit -m &#x27;注释内容&#x27;</span><br></pre></td></tr></table></figure><p><strong>3.3.4、*查看提交日志(log)</strong></p><p><strong>在3.1.3中配置的别名</strong> git <strong>-</strong> log <strong>就包含了这些参数，所以后续可以直接使用指令</strong> git <strong>-</strong> log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用:查看提交记录</span><br><span class="line">命令形式：git log [option]</span><br><span class="line">options</span><br><span class="line">--all 显示所有分支</span><br><span class="line">--pretty=oneline 将提交信息显示为一行</span><br><span class="line">--abbrev-commit 使得输出的commitId更简短</span><br><span class="line">--graph 以图的形式显示</span><br></pre></td></tr></table></figure><p><strong>3.3.5、版本回退</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用：版本切换</span><br><span class="line">命令形式：git reset --hard commitID</span><br><span class="line">commitID 可以使用git-log或git log指令查看</span><br><span class="line">如何查看已经删除的记录？</span><br><span class="line">git reflog</span><br><span class="line">这个指令可以看到已经删除的提交记录</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-5"><a href="#黑马程序员-北京昌平校区-5" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="3-3-6、添加文件至忽略列表"><a href="#3-3-6、添加文件至忽略列表" class="headerlink" title="3.3.6、添加文件至忽略列表"></a>3.3.6、添加文件至忽略列表</h4><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动<br>生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录<br>中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><h4 id="练习-基础操作"><a href="#练习-基础操作" class="headerlink" title="练习:基础操作"></a>练习:基础操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># no .a files</span><br><span class="line">*.a</span><br><span class="line"># but do track lib.a, even though you&#x27;re ignoring .a files above</span><br><span class="line">!lib.a</span><br><span class="line"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># ignore all files in the build/ directory</span><br><span class="line">build/</span><br><span class="line"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># ignore all .pdf files in the doc/ directory</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#####################仓库初始化######################</span><br><span class="line"># 创建目录（git_test01）并在目录下打开gitbash</span><br><span class="line">略</span><br><span class="line"># 初始化git仓库</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#####################创建文件并提交#####################</span><br><span class="line"># 目录下创建文件 file01.txt</span><br><span class="line">略</span><br><span class="line"># 将修改加入暂存区</span><br><span class="line">git add.</span><br><span class="line"># 将修改提交到本地仓库，提交记录内容为：commit 001</span><br><span class="line">git commit -m &#x27;commit 001&#x27;</span><br><span class="line"># 查看日志</span><br><span class="line">git log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">####################修改文件并提交######################</span><br><span class="line"># 修改file01的内容为：count=</span><br><span class="line">略</span><br><span class="line"># 将修改加入暂存区</span><br><span class="line">git add.</span><br><span class="line"># # 将修改提交到本地仓库，提交记录内容为：update file</span><br><span class="line">git commit --m &#x27;update file01&#x27;</span><br><span class="line"># 查看日志</span><br><span class="line">git log</span><br><span class="line"># 以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line">####################将最后一次修改还原##################</span><br><span class="line"># 查看提交记录</span><br><span class="line">git-log</span><br><span class="line"># 找到倒数第 2 次提交的commitID</span><br><span class="line">略</span><br><span class="line"># 版本回退</span><br><span class="line">git reset commitID --hard</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-6"><a href="#黑马程序员-北京昌平校区-6" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h3 id="3-4、分支"><a href="#3-4、分支" class="headerlink" title="3.4、分支"></a>3.4、分支</h3><h4 id="几乎所有的版本控制系统都以某种形式支持分支。-使用分支意味着你可以把你的工作从开发主线上分离"><a href="#几乎所有的版本控制系统都以某种形式支持分支。-使用分支意味着你可以把你的工作从开发主线上分离" class="headerlink" title="几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离"></a>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离</h4><p>开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p><strong>3.4.1、查看本地分支</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：git branch</span><br></pre></td></tr></table></figure><p><strong>3.4.2、创建本地分支</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：git branch 分支名</span><br></pre></td></tr></table></figure><p><strong>3.4.4、*切换分支(checkout)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：git checkout 分支名</span><br></pre></td></tr></table></figure><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：git checkout -b 分支名</span><br></pre></td></tr></table></figure><p><strong>3.4.6、*合并分支(merge)</strong></p><p>一个分支上的提交可以合并到另一个分支</p><p>命令：git merge 分支名称</p><p><strong>3.4.7、删除分支</strong></p><p><strong>不能删除当前分支，只能删除其他分支</strong></p><p>git branch -d b1 删除分支时，需要做各种检查</p><p>git branch -D b1 不做任何检查，强制删除</p><p><strong>3.4.8、解决冲突</strong></p><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解<br>决冲突，解决冲突步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 处理文件中冲突的地方</span><br><span class="line">2. 将解决完冲突的文件加入暂存区(add)</span><br><span class="line">3. 提交到仓库(commit)</span><br></pre></td></tr></table></figure><p>冲突部分的内容处理如下所示：</p><h1 id="黑马程序员-北京昌平校区-7"><a href="#黑马程序员-北京昌平校区-7" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="3-4-9、开发中分支使用原则与流程"><a href="#3-4-9、开发中分支使用原则与流程" class="headerlink" title="3.4.9、开发中分支使用原则与流程"></a>3.4.9、开发中分支使用原则与流程</h4><h4 id="几乎所有的版本控制系统都以某种形式支持分支。-使用分支意味着你可以把你的工作从开发主线上分离-1"><a href="#几乎所有的版本控制系统都以某种形式支持分支。-使用分支意味着你可以把你的工作从开发主线上分离-1" class="headerlink" title="几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离"></a>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离</h4><p>开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">master （生产） 分支</span><br><span class="line">线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</span><br><span class="line">develop（开发）分支</span><br><span class="line">是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线</span><br><span class="line">要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</span><br><span class="line">feature/xxxx分支</span><br><span class="line">从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完</span><br><span class="line">成后合并到develop分支。</span><br><span class="line">hotfix/xxxx分支，</span><br><span class="line">从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、</span><br><span class="line">develop分支。</span><br><span class="line">还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等</span><br><span class="line">等。</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-8"><a href="#黑马程序员-北京昌平校区-8" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="练习-分支操作"><a href="#练习-分支操作" class="headerlink" title="练习:分支操作"></a>练习:分支操作</h4><h2 id="4-、Git远程仓库"><a href="#4-、Git远程仓库" class="headerlink" title="4 、Git远程仓库"></a>4 、Git远程仓库</h2><h3 id="4-1、-常用的托管服务-远程仓库"><a href="#4-1、-常用的托管服务-远程仓库" class="headerlink" title="4.1、 常用的托管服务[远程仓库]"></a>4.1、 常用的托管服务[远程仓库]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">###########################创建并切换到dev01分支，在dev01分支提交</span><br><span class="line"># [master]创建分支dev</span><br><span class="line">git branch dev</span><br><span class="line"># [master]切换到dev</span><br><span class="line">git checkout dev</span><br><span class="line"># [dev01]创建文件file02.txt</span><br><span class="line">略</span><br><span class="line"># [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span><br><span class="line">git add.</span><br><span class="line">git commit -m &#x27;add file02 on dev&#x27;</span><br><span class="line"># [dev01]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line">###########################切换到master分支，将dev01合并到master分支</span><br><span class="line"># [dev01]切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"># [master]合并dev01到master分支</span><br><span class="line">git merge dev</span><br><span class="line"># [master]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"># [master]查看文件变化(目录下也出现了file02.txt)</span><br><span class="line">略</span><br><span class="line">##########################删除dev01分支</span><br><span class="line"># [master]删除dev01分支</span><br><span class="line">git branch -d dev</span><br><span class="line"># [master]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-9"><a href="#黑马程序员-北京昌平校区-9" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h3 id="4-2、-注册码云"><a href="#4-2、-注册码云" class="headerlink" title="4.2、 注册码云"></a>4.2、 注册码云</h3><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><h3 id="4-3、-创建远程仓库"><a href="#4-3、-创建远程仓库" class="headerlink" title="4.3、 创建远程仓库"></a>4.3、 创建远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库</span><br><span class="line">呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</span><br><span class="line">gitHub（ 地址：https://github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持</span><br><span class="line">Git 作为唯一的版本库格式进行托管，故名gitHub</span><br><span class="line">码云（地址： https://gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于</span><br><span class="line">GitHub，码云速度会更快</span><br><span class="line">GitLab （地址： https://about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作</span><br><span class="line">为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-10"><a href="#黑马程序员-北京昌平校区-10" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="仓库创建完成后可以看到仓库地址，如下图所示"><a href="#仓库创建完成后可以看到仓库地址，如下图所示" class="headerlink" title="仓库创建完成后可以看到仓库地址，如下图所示:"></a>仓库创建完成后可以看到仓库地址，如下图所示:</h4><h3 id="4-4、配置SSH公钥"><a href="#4-4、配置SSH公钥" class="headerlink" title="4.4、配置SSH公钥"></a>4.4、配置SSH公钥</h3><h4 id="生成SSH公钥"><a href="#生成SSH公钥" class="headerlink" title="生成SSH公钥"></a>生成SSH公钥</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">不断回车</span><br><span class="line">如果公钥已经存在，则自动覆盖</span><br><span class="line">Gitee设置账户共公钥</span><br><span class="line">获取公钥</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-11"><a href="#黑马程序员-北京昌平校区-11" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><h3 id="4-5、操作远程仓库"><a href="#4-5、操作远程仓库" class="headerlink" title="4.5、操作远程仓库"></a>4.5、操作远程仓库</h3><h4 id="4-5-1、添加远程仓库"><a href="#4-5-1、添加远程仓库" class="headerlink" title="4.5.1、添加远程仓库"></a>4.5.1、添加远程仓库</h4><h4 id="此操作是先初始化本地库，然后与已创建的远程库进行对接-。"><a href="#此操作是先初始化本地库，然后与已创建的远程库进行对接-。" class="headerlink" title="此操作是先初始化本地库，然后与已创建的远程库进行对接 。"></a>此操作是先初始化本地库，然后与已创建的远程库进行对接 。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令： git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</span><br><span class="line">远端名称，默认是origin，取决于远端服务器设置</span><br><span class="line">仓库路径，从远端服务器获取此URL</span><br><span class="line">例如: git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</span><br></pre></td></tr></table></figure><h4 id="4-5-2、查看远程仓库"><a href="#4-5-2、查看远程仓库" class="headerlink" title="4.5.2、查看远程仓库"></a>4.5.2、查看远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：git remote</span><br></pre></td></tr></table></figure><h4 id="4-5-3、推送到远程仓库"><a href="#4-5-3、推送到远程仓库" class="headerlink" title="4.5.3、推送到远程仓库"></a>4.5.3、推送到远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令：git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ]</span><br><span class="line">如果远程分支名和本地分支名称相同，则可以只写本地分支</span><br><span class="line">git push origin master</span><br><span class="line">-f 表示强制覆盖</span><br><span class="line">--set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</span><br><span class="line">git push --set-upstream origin master</span><br><span class="line">如果 当前分支已经和远端分支关联 ，则可以省略分支名和远端名。</span><br><span class="line">git push 将master分支推送到已关联的远端分支。</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-12"><a href="#黑马程序员-北京昌平校区-12" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="查询远程仓库"><a href="#查询远程仓库" class="headerlink" title="查询远程仓库"></a>查询远程仓库</h4><h4 id="4-5-4、-本地分支与远程分支的关联关系"><a href="#4-5-4、-本地分支与远程分支的关联关系" class="headerlink" title="4.5.4、 本地分支与远程分支的关联关系"></a>4.5.4、 本地分支与远程分支的关联关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看关联关系我们可以使用 git branch -vv命令</span><br></pre></td></tr></table></figure><h4 id="4-5-5、从远程仓库克隆"><a href="#4-5-5、从远程仓库克隆" class="headerlink" title="4.5.5、从远程仓库克隆"></a>4.5.5、从远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令: git clone &lt;仓库路径&gt; [本地目录]</span><br><span class="line">本地目录可以省略，会自动生成一个目录</span><br></pre></td></tr></table></figure><h4 id="4-5-6、从远程仓库中抓取和拉取"><a href="#4-5-6、从远程仓库中抓取和拉取" class="headerlink" title="4.5.6、从远程仓库中抓取和拉取"></a>4.5.6、从远程仓库中抓取和拉取</h4><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本<br>地，再进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">抓取 命令：git fetch [remote name] [branch name]</span><br><span class="line">抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-13"><a href="#黑马程序员-北京昌平校区-13" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="如果不指定远端名称和分支名，则抓取所有分支。"><a href="#如果不指定远端名称和分支名，则抓取所有分支。" class="headerlink" title="如果不指定远端名称和分支名，则抓取所有分支。"></a>如果不指定远端名称和分支名，则抓取所有分支。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">拉取 命令：git pull [remote name] [branch name]</span><br><span class="line">拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</span><br><span class="line">如果不指定远端名称和分支名，则抓取所有并更新当前分支。</span><br><span class="line">1. 在test01这个本地仓库进行一次提交并推送到远程仓库</span><br></pre></td></tr></table></figure><h4 id="2-在另一个仓库将远程提交的代码拉取到本地仓库"><a href="#2-在另一个仓库将远程提交的代码拉取到本地仓库" class="headerlink" title="2. 在另一个仓库将远程提交的代码拉取到本地仓库"></a>2. 在另一个仓库将远程提交的代码拉取到本地仓库</h4><h4 id="4-5-7、解决合并冲突"><a href="#4-5-7、解决合并冲突" class="headerlink" title="4.5.7、解决合并冲突"></a>4.5.7、解决合并冲突</h4><h4 id="在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。"><a href="#在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。" class="headerlink" title="在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。"></a>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</h4><h4 id="A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要"><a href="#A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要" class="headerlink" title="A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要"></a>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要</h4><h4 id="推送到远程仓库，此时B用户晚于A用户，-故需要先拉取远程仓库的提交，经过合并后才能推送到远端分"><a href="#推送到远程仓库，此时B用户晚于A用户，-故需要先拉取远程仓库的提交，经过合并后才能推送到远端分" class="headerlink" title="推送到远程仓库，此时B用户晚于A用户， 故需要先拉取远程仓库的提交，经过合并后才能推送到远端分"></a>推送到远程仓库，此时B用户晚于A用户， 故需要先拉取远程仓库的提交，经过合并后才能推送到远端分</h4><h4 id="支-如下图所示。"><a href="#支-如下图所示。" class="headerlink" title="支 ,如下图所示。"></a>支 ,如下图所示。</h4><h1 id="黑马程序员-北京昌平校区-14"><a href="#黑马程序员-北京昌平校区-14" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲"><a href="#在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲" class="headerlink" title="在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲"></a>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲</h4><h4 id="突。"><a href="#突。" class="headerlink" title="突。"></a>突。</h4><h4 id="远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同-，在此不再赘述，需要"><a href="#远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同-，在此不再赘述，需要" class="headerlink" title="远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同 ，在此不再赘述，需要"></a>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同 ，在此不再赘述，需要</h4><h4 id="学员自己练习。"><a href="#学员自己练习。" class="headerlink" title="学员自己练习。"></a>学员自己练习。</h4><h3 id="练习-远程仓库操作"><a href="#练习-远程仓库操作" class="headerlink" title="练习:远程仓库操作"></a>练习:远程仓库操作</h3><h2 id="5-、在Idea中使用Git"><a href="#5-、在Idea中使用Git" class="headerlink" title="5 、在Idea中使用Git"></a>5 、在Idea中使用Git</h2><h3 id="5-1、在Idea中配置Git"><a href="#5-1、在Idea中配置Git" class="headerlink" title="5.1、在Idea中配置Git"></a>5.1、在Idea中配置Git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">##########################1-将本地仓库推送到远程仓库</span><br><span class="line"># 完成4.1、4.2、4.3、4.4的操作</span><br><span class="line">略</span><br><span class="line"># [git_test01]添加远程仓库</span><br><span class="line">git remote add origin  git@gitee.com/**/**.git</span><br><span class="line"># [git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span><br><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">###########################2-将远程仓库克隆到本地</span><br><span class="line"># 将远程仓库克隆到本地git_test02目录下</span><br><span class="line">git clone git@gitee.com/**/**.git git_test</span><br><span class="line"># [git_test02]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">###########################3-将本地修改推送到远程仓库</span><br><span class="line"># [git_test01]创建文件file03.txt</span><br><span class="line">略</span><br><span class="line"># [git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file</span><br><span class="line">git add.</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line"># [git_test01]将master分支的修改推送到远程仓库</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">###########################4-将远程仓库的修改更新到本地</span><br><span class="line"># [git_test02]将远程仓库修改再拉取到本地</span><br><span class="line">git pull</span><br><span class="line"># 以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"># 查看文件变化(目录下也出现了file03.txt)</span><br><span class="line">略</span><br></pre></td></tr></table></figure><h1 id="黑马程序员-北京昌平校区-15"><a href="#黑马程序员-北京昌平校区-15" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><p>安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安<br>装位置则需要手动配置下Git的路径。选择File→Settings打开设置窗口，找到Version Control下的git选<br>项：</p><p>点击Test按钮,现在执行成功，配置完成</p><h3 id="5-2、在Idea中操作Git"><a href="#5-2、在Idea中操作Git" class="headerlink" title="5.2、在Idea中操作Git"></a>5.2、在Idea中操作Git</h3><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员<br>继续一起协作开发。</p><h1 id="5-2-1、创建项目远程仓库（参照-黑马程序员-北京昌平校区-4-3）"><a href="#5-2-1、创建项目远程仓库（参照-黑马程序员-北京昌平校区-4-3）" class="headerlink" title="5.2.1、创建项目远程仓库（参照 黑马程序员 北京昌平校区 4.3）"></a>5.2.1、创建项目远程仓库（参照 黑马程序员 北京昌平校区 4.3）</h1><h4 id="5-2-2、初始化本地仓库"><a href="#5-2-2、初始化本地仓库" class="headerlink" title="5.2.2、初始化本地仓库"></a>5.2.2、初始化本地仓库</h4><h1 id="黑马程序员-北京昌平校区-16"><a href="#黑马程序员-北京昌平校区-16" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="5-2-3、设置远程仓库"><a href="#5-2-3、设置远程仓库" class="headerlink" title="5.2.3、设置远程仓库"></a>5.2.3、设置远程仓库</h4><h4 id="5-2-4、提交到本地仓库"><a href="#5-2-4、提交到本地仓库" class="headerlink" title="5.2.4、提交到本地仓库"></a>5.2.4、提交到本地仓库</h4><h1 id="黑马程序员-北京昌平校区-17"><a href="#黑马程序员-北京昌平校区-17" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="5-2-6、推送到远程仓库"><a href="#5-2-6、推送到远程仓库" class="headerlink" title="5.2.6、推送到远程仓库"></a>5.2.6、推送到远程仓库</h4><h4 id="5-2-7、克隆远程仓库到本地"><a href="#5-2-7、克隆远程仓库到本地" class="headerlink" title="5.2.7、克隆远程仓库到本地"></a>5.2.7、克隆远程仓库到本地</h4><h1 id="黑马程序员-北京昌平校区-18"><a href="#黑马程序员-北京昌平校区-18" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="5-2-8、创建分支"><a href="#5-2-8、创建分支" class="headerlink" title="5.2.8、创建分支"></a>5.2.8、创建分支</h4><h4 id="最常规的方式"><a href="#最常规的方式" class="headerlink" title="最常规的方式"></a>最常规的方式</h4><h4 id="最强大的的方式"><a href="#最强大的的方式" class="headerlink" title="最强大的的方式"></a>最强大的的方式</h4><h4 id="5-2-9、切换分支及其他分支相关操作"><a href="#5-2-9、切换分支及其他分支相关操作" class="headerlink" title="5.2.9、切换分支及其他分支相关操作"></a>5.2.9、切换分支及其他分支相关操作</h4><h1 id="黑马程序员-北京昌平校区-19"><a href="#黑马程序员-北京昌平校区-19" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h4 id="5-2-11、解决冲突"><a href="#5-2-11、解决冲突" class="headerlink" title="5.2.11、解决冲突"></a>5.2.11、解决冲突</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 执行merge或pull操作时，可能发生冲突</span><br></pre></td></tr></table></figure><h4 id="2-冲突解决后加入暂存区"><a href="#2-冲突解决后加入暂存区" class="headerlink" title="2. 冲突解决后加入暂存区"></a>2. 冲突解决后加入暂存区</h4><h4 id="略"><a href="#略" class="headerlink" title="略"></a>略</h4><h4 id="3-提交到本地仓库"><a href="#3-提交到本地仓库" class="headerlink" title="3. 提交到本地仓库"></a>3. 提交到本地仓库</h4><h4 id="略-1"><a href="#略-1" class="headerlink" title="略"></a>略</h4><h4 id="4-推送到远程仓库"><a href="#4-推送到远程仓库" class="headerlink" title="4. 推送到远程仓库"></a>4. 推送到远程仓库</h4><h4 id="略-2"><a href="#略-2" class="headerlink" title="略"></a>略</h4><h3 id="5-3、IDEA常用GIT操作入口"><a href="#5-3、IDEA常用GIT操作入口" class="headerlink" title="5.3、IDEA常用GIT操作入口"></a>5.3、IDEA常用GIT操作入口</h3><h4 id="1-第一张图上的快捷入口可以基本满足开发的需求。"><a href="#1-第一张图上的快捷入口可以基本满足开发的需求。" class="headerlink" title="1. 第一张图上的快捷入口可以基本满足开发的需求。"></a>1. 第一张图上的快捷入口可以基本满足开发的需求。</h4><h1 id="黑马程序员-北京昌平校区-20"><a href="#黑马程序员-北京昌平校区-20" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 第二张图是更多在IDEA操作git的入口。</span><br></pre></td></tr></table></figure><h3 id="5-4、场景分析"><a href="#5-4、场景分析" class="headerlink" title="5.4、场景分析"></a>5.4、场景分析</h3><h4 id="基于我们后面的实战模式，我们做一个综合练习"><a href="#基于我们后面的实战模式，我们做一个综合练习" class="headerlink" title="基于我们后面的实战模式，我们做一个综合练习"></a>基于我们后面的实战模式，我们做一个综合练习</h4><h4 id="当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模"><a href="#当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模" class="headerlink" title="当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模"></a>当前的开发环境如下，我们每个人都对这个项目已经开发一段时间，接下来我们要切换成团队开发模</h4><h4 id="式。"><a href="#式。" class="headerlink" title="式。"></a>式。</h4><h4 id="也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项"><a href="#也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项" class="headerlink" title="也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项"></a>也就是我们由一个团队来完成这个项目实战的内容。团队有组长和若干组员组成（组长就是开发中的项</h4><h4 id="目经理）。"><a href="#目经理）。" class="headerlink" title="目经理）。"></a>目经理）。</h4><p>所有操作都在idea中完成。</p><p>练习场景如下：</p><p>1 、由组长，基于本项目创建本地仓库；创建远程仓库，推送项目到远程仓库。</p><h1 id="黑马程序员-北京昌平校区-21"><a href="#黑马程序员-北京昌平校区-21" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><p>2 、每一位组员从远程仓库克隆项目到idea中,这样每位同学在自己电脑上就有了一个工作副本，可以正<br>式的开始开发了。我们模拟两个组员(组员A、组员B)，克隆两个工作区。</p><h4 id="3-、组员A修改工作区-提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代"><a href="#3-、组员A修改工作区-提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代" class="headerlink" title="3 、组员A修改工作区,提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代"></a>3 、组员A修改工作区,提交到本地仓库，再推送到远程仓库。组员B可以直接从远程仓库获取最新的代</h4><h4 id="码。"><a href="#码。" class="headerlink" title="码。"></a>码。</h4><h4 id="4-、组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个"><a href="#4-、组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个" class="headerlink" title="4 、组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个"></a>4 、组员A和组员B修改了同一个文件的同一行，提交到本地没有问题，但是推送到远程仓库时，后一个</h4><h4 id="推送操作就会失败。"><a href="#推送操作就会失败。" class="headerlink" title="推送操作就会失败。"></a>推送操作就会失败。</h4><h4 id="解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。"><a href="#解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。" class="headerlink" title="解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。"></a>解决方法：需要先获取远程仓库的代码到本地仓库，编辑冲突，提交并推送代码。</h4><h1 id="黑马程序员-北京昌平校区-22"><a href="#黑马程序员-北京昌平校区-22" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1><h2 id="附-几条铁令"><a href="#附-几条铁令" class="headerlink" title="附:几条铁令"></a>附:几条铁令</h2><h4 id="1-切换分支前先提交本地的修改"><a href="#1-切换分支前先提交本地的修改" class="headerlink" title="1. 切换分支前先提交本地的修改"></a>1. 切换分支前先提交本地的修改</h4><h4 id="2-代码及时提交，提交过了就不会丢"><a href="#2-代码及时提交，提交过了就不会丢" class="headerlink" title="2. 代码及时提交，提交过了就不会丢"></a>2. 代码及时提交，提交过了就不会丢</h4><h4 id="3-遇到任何问题都不要删除文件目录，第-1-时间找老师"><a href="#3-遇到任何问题都不要删除文件目录，第-1-时间找老师" class="headerlink" title="3. 遇到任何问题都不要删除文件目录，第 1 时间找老师"></a>3. 遇到任何问题都不要删除文件目录，第 1 时间找老师</h4><h2 id="附-疑难问题解决"><a href="#附-疑难问题解决" class="headerlink" title="附:疑难问题解决"></a>附:疑难问题解决</h2><h2 id="1-windows下看不到隐藏的文件（-bashrc、-gitignore）"><a href="#1-windows下看不到隐藏的文件（-bashrc、-gitignore）" class="headerlink" title="1. windows下看不到隐藏的文件（.bashrc、.gitignore）"></a>1. windows下看不到隐藏的文件（.bashrc、.gitignore）</h2><h2 id="2-windows下无法创建-ignore-bashrc文件"><a href="#2-windows下无法创建-ignore-bashrc文件" class="headerlink" title="2. windows下无法创建.ignore|.bashrc文件"></a>2. windows下无法创建.ignore|.bashrc文件</h2><p>这里以创建.ignore文件为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在git目录下打开gitbash</span><br></pre></td></tr></table></figure><h1 id="执行指令touch-gitignore黑马程序员-北京昌平校区"><a href="#执行指令touch-gitignore黑马程序员-北京昌平校区" class="headerlink" title="执行指令touch .gitignore黑马程序员 北京昌平校区"></a>执行指令touch .gitignore黑马程序员 北京昌平校区</h1><h2 id="附：IDEA集成GitBash作为Terminal"><a href="#附：IDEA集成GitBash作为Terminal" class="headerlink" title="附：IDEA集成GitBash作为Terminal"></a>附：IDEA集成GitBash作为Terminal</h2><h1 id="黑马程序员-北京昌平校区-23"><a href="#黑马程序员-北京昌平校区-23" class="headerlink" title="黑马程序员 北京昌平校区"></a>黑马程序员 北京昌平校区</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;title: Git学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Git分布式版本控制工具&quot;&gt;&lt;a href=&quot;#Git分布式版本控制工具&quot; class=&quot;headerlink&quot; title=&quot;Git分布式版本控制工具&quot;&gt;&lt;/a&gt;Git</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://example.com/2022/07/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/07/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2022-07-07T13:54:39.000Z</published>
    <updated>2022-07-07T13:58:23.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/07/06/hello-world/"/>
    <id>http://example.com/2022/07/06/hello-world/</id>
    <published>2022-07-06T14:20:03.109Z</published>
    <updated>2022-07-06T14:20:03.109Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
